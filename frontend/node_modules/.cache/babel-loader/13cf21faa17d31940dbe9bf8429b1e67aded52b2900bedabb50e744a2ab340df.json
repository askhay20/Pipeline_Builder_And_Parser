{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\frontend\\\\frontend\\\\src\\\\nodes\\\\textNode.js\",\n  _s = $RefreshSig$();\n// textNode.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GenericNode } from './genericNode';\nimport { useStore } from '../store';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VAR_RE = /{{\\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*}}/g;\nexport const TextNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [currText, setCurrText] = useState((data === null || data === void 0 ? void 0 : data.text) || '');\n  const [vars, setVars] = useState((data === null || data === void 0 ? void 0 : data.vars) || []);\n  const inputRef = useRef(null);\n  const updateNodeField = useStore(s => s.updateNodeField);\n  useEffect(() => {\n    // detect variables and persist\n    const found = new Set();\n    let m;\n    VAR_RE.lastIndex = 0;\n    while ((m = VAR_RE.exec(currText)) !== null) {\n      found.add(m[1]);\n    }\n    const varList = Array.from(found);\n    setVars(varList);\n    try {\n      if (updateNodeField) updateNodeField(id, 'vars', varList);\n      if (updateNodeField) updateNodeField(id, 'text', currText);\n    } catch (e) {\n      // ignore\n    }\n  }, [currText, id, updateNodeField]);\n\n  // auto-resize the input width/height based on content\n  useEffect(() => {\n    const el = inputRef.current;\n    if (!el) return;\n    // approximate width/height by character count\n    const lines = currText.split('\\n');\n    const maxLine = lines.reduce((a, b) => Math.max(a, b.length), 0);\n    el.style.width = Math.min(320, Math.max(120, maxLine * 8 + 20)) + 'px';\n    el.style.height = Math.min(200, Math.max(28, lines.length * 20)) + 'px';\n  }, [currText]);\n  return /*#__PURE__*/_jsxDEV(GenericNode, {\n    id: id,\n    data: data,\n    title: \"Text\",\n    leftHandles: vars.map(v => ({\n      id: v\n    })),\n    rightHandles: [{\n      id: 'output'\n    }],\n    children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n      ref: inputRef,\n      value: currText,\n      onChange: e => setCurrText(e.target.value),\n      placeholder: 'Type text. Use {{variable}} to create inputs.',\n      style: {\n        resize: 'none',\n        minWidth: 120\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginTop: 6,\n        fontSize: 12,\n        color: '#666'\n      },\n      children: [\"Variables: \", vars.length ? vars.join(', ') : 'none']\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(TextNode, \"pOdccHRUCCiWY6QqrkYDb5w0ZLc=\", false, function () {\n  return [useStore];\n});\n_c = TextNode;\nvar _c;\n$RefreshReg$(_c, \"TextNode\");","map":{"version":3,"names":["React","useState","useEffect","useRef","GenericNode","useStore","jsxDEV","_jsxDEV","VAR_RE","TextNode","id","data","_s","currText","setCurrText","text","vars","setVars","inputRef","updateNodeField","s","found","Set","m","lastIndex","exec","add","varList","Array","from","e","el","current","lines","split","maxLine","reduce","a","b","Math","max","length","style","width","min","height","title","leftHandles","map","v","rightHandles","children","ref","value","onChange","target","placeholder","resize","minWidth","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","fontSize","color","join","_c","$RefreshReg$"],"sources":["D:/Downloads/frontend/frontend/src/nodes/textNode.js"],"sourcesContent":["// textNode.js\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport { GenericNode } from './genericNode';\nimport { useStore } from '../store';\n\nconst VAR_RE = /{{\\s*([a-zA-Z_$][a-zA-Z0-9_$]*)\\s*}}/g;\n\nexport const TextNode = ({ id, data }) => {\n  const [currText, setCurrText] = useState(data?.text || '');\n  const [vars, setVars] = useState(data?.vars || []);\n  const inputRef = useRef(null);\n  const updateNodeField = useStore((s) => s.updateNodeField);\n\n  useEffect(() => {\n    // detect variables and persist\n    const found = new Set();\n    let m; VAR_RE.lastIndex = 0;\n    while ((m = VAR_RE.exec(currText)) !== null) {\n      found.add(m[1]);\n    }\n\n    const varList = Array.from(found);\n    setVars(varList);\n    try {\n      if (updateNodeField) updateNodeField(id, 'vars', varList);\n      if (updateNodeField) updateNodeField(id, 'text', currText);\n    } catch(e) {\n      // ignore\n    }\n  }, [currText, id, updateNodeField]);\n\n  // auto-resize the input width/height based on content\n  useEffect(() => {\n    const el = inputRef.current;\n    if (!el) return;\n    // approximate width/height by character count\n    const lines = currText.split('\\n');\n    const maxLine = lines.reduce((a,b)=> Math.max(a,b.length), 0);\n    el.style.width = Math.min(320, Math.max(120, maxLine * 8 + 20)) + 'px';\n    el.style.height = Math.min(200, Math.max(28, lines.length * 20)) + 'px';\n  }, [currText]);\n\n  return (\n    <GenericNode id={id} data={data} title=\"Text\" leftHandles={vars.map(v=>({id:v}))} rightHandles={[{id:'output'}]}>\n      <textarea\n        ref={inputRef}\n        value={currText}\n        onChange={(e) => setCurrText(e.target.value)}\n        placeholder={'Type text. Use {{variable}} to create inputs.'}\n        style={{ resize: 'none', minWidth: 120 }}\n      />\n      <div style={{marginTop:6, fontSize:12, color:'#666'}}>\n        Variables: {vars.length ? vars.join(', ') : 'none'}\n      </div>\n    </GenericNode>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}