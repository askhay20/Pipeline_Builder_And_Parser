{"ast":null,"code":"var _jsxFileName = \"D:\\\\Downloads\\\\frontend\\\\frontend\\\\src\\\\nodes\\\\mathNode.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { GenericNode } from './genericNode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MathNode = ({\n  id,\n  data\n}) => {\n  _s();\n  const [expr, setExpr] = useState((data === null || data === void 0 ? void 0 : data.expr) || '1+1');\n  let result = '';\n  try {\n    result = eval(expr);\n  } catch (e) {\n    result = 'err';\n  }\n  return /*#__PURE__*/_jsxDEV(GenericNode, {\n    id: id,\n    data: data,\n    title: \"Math\",\n    leftHandles: [],\n    rightHandles: [{\n      id: 'result'\n    }],\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      children: [\"Expr: \", /*#__PURE__*/_jsxDEV(\"input\", {\n        value: expr,\n        onChange: e => setExpr(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 20\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Result: \", String(result)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_s(MathNode, \"il5O/3h+Nia217Ws8agkyw+aNgg=\");\n_c = MathNode;\nvar _c;\n$RefreshReg$(_c, \"MathNode\");","map":{"version":3,"names":["React","useState","GenericNode","jsxDEV","_jsxDEV","MathNode","id","data","_s","expr","setExpr","result","eval","e","title","leftHandles","rightHandles","children","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","String","_c","$RefreshReg$"],"sources":["D:/Downloads/frontend/frontend/src/nodes/mathNode.js"],"sourcesContent":["import React, {useState} from 'react';\r\nimport { GenericNode } from './genericNode';\r\n\r\nexport const MathNode = ({ id, data }) => {\r\n  const [expr, setExpr] = useState(data?.expr || '1+1');\r\n  let result = '';\r\n  try { result = eval(expr); } catch(e) { result = 'err'; }\r\n  return (\r\n    <GenericNode id={id} data={data} title=\"Math\" leftHandles={[]} rightHandles={[{id:'result'}]}>\r\n      <label>Expr: <input value={expr} onChange={e=>setExpr(e.target.value)} /></label>\r\n      <div>Result: {String(result)}</div>\r\n    </GenericNode>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,SAASC,WAAW,QAAQ,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE5C,OAAO,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,EAAE;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EACxC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,CAAAM,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEE,IAAI,KAAI,KAAK,CAAC;EACrD,IAAIE,MAAM,GAAG,EAAE;EACf,IAAI;IAAEA,MAAM,GAAGC,IAAI,CAACH,IAAI,CAAC;EAAE,CAAC,CAAC,OAAMI,CAAC,EAAE;IAAEF,MAAM,GAAG,KAAK;EAAE;EACxD,oBACEP,OAAA,CAACF,WAAW;IAACI,EAAE,EAAEA,EAAG;IAACC,IAAI,EAAEA,IAAK;IAACO,KAAK,EAAC,MAAM;IAACC,WAAW,EAAE,EAAG;IAACC,YAAY,EAAE,CAAC;MAACV,EAAE,EAAC;IAAQ,CAAC,CAAE;IAAAW,QAAA,gBAC3Fb,OAAA;MAAAa,QAAA,GAAO,QAAM,eAAAb,OAAA;QAAOc,KAAK,EAAET,IAAK;QAACU,QAAQ,EAAEN,CAAC,IAAEH,OAAO,CAACG,CAAC,CAACO,MAAM,CAACF,KAAK;MAAE;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAO,CAAC,eACjFpB,OAAA;MAAAa,QAAA,GAAK,UAAQ,EAACQ,MAAM,CAACd,MAAM,CAAC;IAAA;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxB,CAAC;AAElB,CAAC;AAAChB,EAAA,CAVWH,QAAQ;AAAAqB,EAAA,GAARrB,QAAQ;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}